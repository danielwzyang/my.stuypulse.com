---
import Layout from "../components/Layout.astro"
import AdminForm from "../components/AdminForm.astro"
import { supabase } from "../lib/supabase"
import UserDashboard from "../components/UserDashboard.astro"

// checks if the user is logged in through the cookies
// if they aren't logged in then we redirect them to login
const accessToken = Astro.cookies.get("sb-access-token")
const refreshToken = Astro.cookies.get("sb-refresh-token")
if (!accessToken || !refreshToken) return Astro.redirect("/")

// handles session
let session
try {
    // uses the cookies to set the session
    session = await supabase.auth.setSession({
        refresh_token: refreshToken.value,
        access_token: accessToken.value,
    })

    // if there's an error then the tokens are deleted and user is redirected to login
    if (session.error) {
        Astro.cookies.delete("sb-access-token", {
            path: "/",
        })
        Astro.cookies.delete("sb-refresh-token", {
            path: "/",
        })

        return Astro.redirect("/")
    }
} catch (error) {
    // same thing as above error handling
    Astro.cookies.delete("sb-access-token", {
        path: "/",
    })
    Astro.cookies.delete("sb-refresh-token", {
        path: "/",
    })
    return Astro.redirect("/")
}

// the osis is stored as email in the supabase database
let osis = session.data.user?.email?.split("@")[0]

let allMeetings: string[] = []
let userData

// if the user is the admin use search params for osis
osis = Astro.url.searchParams.get("osis") || osis

if (osis && osis !== "admin") {
    // gets the user row from the database
    const { data, error } = await supabase
        .from("attendance")
        .select("*")
        .in("id_number", [osis, "all"])
        .order("id_number", { ascending: true })

    if (error) console.error("error fetching data")
    else { 
        userData = data[0]
        allMeetings = data[1].checked_out
    }
}
---

<Layout title="Dashboard | MyPulse" desc="Track attendance and see upcoming events for StuyPulse">
    <div class="flex flex-col items-center justify-center min-h-[80vh]">
        {
            osis === "admin" ? 
                <AdminForm /> 
            :   <UserDashboard osis={osis} checkedOut={userData.checked_out} onlyCheckedIn={userData.only_checked_in} allMeetings={allMeetings} userData={userData} />
        }
    </div>
</Layout>